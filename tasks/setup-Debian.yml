---
- name: Checking if MySQL is already installed.
  shell: which mysqld_safe
  ignore_errors: yes
  register: check_mysqld

- name: Updating apt cache if MySQL is not yet installed.
  apt: update_cache=yes
  when: check_mysqld.rc != 0

- name: Making sure MySQL packages are installed.
  apt: name={{ mysql_packages }} state=present
  register: deb_mysql_install_packages

- name: Making sure MySQL Python libraries are installed.
  apt: name=python-mysqldb state=present
  when:
    ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int <= 18 or
    ansible_distribution == 'Debian' and ansible_distribution_major_version|int <= 10

- name: Making sure MySQL Python3 libraries are installed.
  apt: name=python3-mysqldb state=present
  when:
    ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int > 18 or
    ansible_distribution == 'Debian' and ansible_distribution_major_version|int > 10


- name: Making sure MySQL is stopped after initial install.
  service: name={{ mysql_daemon }} state=stopped
  when: check_mysqld.rc != 0

- name: Deleting innodb log files created by apt package after initial install.
  file:
    path:
      - "{{ mysql_datadir }}/ib_logfile0"
      - "{{ mysql_datadir }}/ib_logfile1"
    state: absent
  when: check_mysqld.rc != 0
  notify: start mysql

- name: Checking if Apache is already installed.
  stat: path=/usr/sbin/apachectl
  register: apache_installed

- name: Updating apt cache if Apache is not yet installed.
  apt: update_cache=yes
  when: apache_installed.stat.exists == false

- name: Installing Apache packages.
  apt: name={{ apache_packages }} state=present
  register: deb_apache_install_packages

- name: Enabling Apache module (ssl).
  apache2_module: name=ssl state=present
  notify: restart apache

- name: Enabling Apache module (rewrite).
  apache2_module: name=rewrite state=present
  notify: restart apache

- name: Checking if ClusterControl Controller is already installed.
  stat: path=/etc/sbin/cmon
  register: cmon_installed

- name: Configuring ClusterControl package repository.
  stat: path={{ repo_config_path }}
  register: s9s_repo_installed

- name: Installing ClusterControl CLI GPG key (apt)
  apt_key:
    url: "{{ clustercontrol_cli_key }}"
    state: present

- name: Configuring ClusterControl CLI repository.
  apt_repository:
    repo: "{{ clustercontrol_cli_repository }}"
    state: present

- name: Installing Severalnines GPG key (apt)
  apt_key: state=present url={{ gpg_key }}
  when: s9s_repo_installed.stat.exists == false

- name: Installing ClusterControl repository.
  get_url: url={{ repo_config_url }} dest={{ repo_config_path }}
  when: s9s_repo_installed.stat.exists == false

- name: Updating apt cache if ClusterControl is not yet installed.
  apt: update_cache=yes

- name: Installing latest version of ClusterControl Controller packages.
  apt: name={{ clustercontrol_controller_packages }} state=latest
  register: deb_clustercontrol_controller_install_packages

- name: Installing latest version of ClusterControl UI packages.
  apt: name={{ clustercontrol_ui_packages }} state=latest
  register: deb_clustercontrol_ui_install_packages

- name: Installing latest version of ClusterControl CLI package.
  apt: name={{ clustercontrol_cli_packages }} state=latest
  register: deb_clustercontrol_cli_install_packages

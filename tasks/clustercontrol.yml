---
- name: Check if CMON configuration does exist.
  stat: path={{ cmon_config_file }}
  register: cmon_cnf

- name: Check if ClusterControl bootstrap file does exist.
  stat: path={{ ccui_bootstrap }}
  register: ccui_bs

- name: Check if CMON default file exists.
  stat: path=/etc/default/cmon
  register: cmon_default

- name: Copy the CMON default file into /etc/default/cmon.
  template:
    src: "cmon.default.j2"
    dest: "/etc/default/cmon"
    owner: root
    group: root
    mode: 0644
  when:
    cmon_default.stat.exists == False

- name: Generate ClusterControl RPC token.
  shell: "python -c 'import uuid; print uuid.uuid4()' | sha1sum | cut -f1 -d' '"
  register: api_token

- name: Retrieve existing ClusterControl RPC token.
  shell: "grep ^rpc_key {{ cmon_config_file }} | cut -d'=' -f2"
  register: api_token_retrieved
  when: cmon_cnf.stat.exists == true

- name: Define new API token.
  set_fact:
    api_rpc_token: "{{ api_token.stdout }}"
  when: api_token_retrieved.stdout == ""

- name: Define existing API token.
  set_fact:
    api_rpc_token: "{{ api_token_retrieved.stdout }}"
  when: api_token_retrieved.stdout != ""

- name: Install ClusterControl API token.
  shell: >
    mysql -u root -NBe
    "REPLACE INTO dcps.apis
    (id, company_id, user_id, url, token)
    VALUES
    (1, 1, 1, 'http://127.0.0.1/cmonapi', '{{ api_rpc_token }}')"
  when:
    clustercontrol_controller_install_packages and
    clustercontrol_ui_install_packages
  become: yes
  become_user: "{{ cmon_ssh_user }}"

- name: Configure ClusterControl admin credentials.
  shell: >
    mysql -u root -NBe
    "SET @salt := (SELECT SUBSTR(CONCAT(MD5(RAND()),MD5(RAND())),1,40));
    REPLACE INTO dcps.users
    (id, company_id, email, password, sa, created, salt, uuid, email_verified)
    VALUES
    (1, 1, '{{ item.email }}', SHA2(CONCAT(@salt,'{{ item.password }}'),256), 1, unix_timestamp(), @salt, '{{ api_rpc_token }}', 1)"
  with_items: "{{ cc_admin }}"
  when:
    item.email    is defined and
    item.password is defined and
    api_rpc_token is defined and
    item.set
  become: yes
  become_user: "{{ cmon_ssh_user }}"

- name: Configure ClusterControl license.
  shell: >
    mysql -u root -NBe
    "REPLACE INTO cmon.license
    (email, company, exp_date, lickey)
    VALUES
    ('{{ item.email }}', '{{ item.company }}', '{{ item.expired_date }}', '{{ item.key }}')"
  with_items: "{{ cc_license }}"
  when:
    item.email        is defined and
    item.company      is defined and
    item.expired_date is defined and
    item.key          is defined and
    item.set
  become: yes
  become_user: "{{ cmon_ssh_user }}"

- name: Configure ClusterControl LDAP settings.
  shell: >
    mysql -u root -NBe
    "REPLACE INTO dcps.ldap_settings
    (id, enable_ldap_auth, host, port, login, base_dsn, user_dn, group_dn)
    VALUES
    (1, {{ item.enabled }}, '{{ item.host }}', '{{ item.port }}', '{{ item.admin_dn }}', '{{ item.base_dn }}', '{{ item.user_dn }}', '{{ item.group_dn }}')"
  with_items: "{{ cc_ldap }}"
  when:
    item.enabled        is defined and
    item.host           is defined and
    item.port           is defined and
    item.admin_dn       is defined and
    item.admin_password is defined and
    item.base_dn        is defined and
    item.user_dn        is defined and
    item.group_dn       is defined and
    item.set
  become: yes
  become_user: "{{ cmon_ssh_user }}"

- name: Copy encrypt.php to encrypt LDAP password.
  template:
    src: "encrypt.php.j2"
    dest: "{{ apache_doc_root }}/clustercontrol/app/tools/encrypt.php"
    owner: "{{ apache_user }}"
    group: "{{ apache_user }}"
    mode: 0755
  with_items: "{{ cc_ldap }}"
  when:
    item.set

- name: Read ClusterControl UI encryption key.
  shell: grep Security.cipherSeed "{{ apache_doc_root }}/clustercontrol/app/Config/core.php" | awk {'print $2'} | tr -d "');"
  args:
    executable: /bin/bash
  register: encryption_key
  become: yes
  become_user: "{{ cmon_ssh_user }}"

- name: Update ClusterControl LDAP encrypted password.
  shell: php -q encrypt.php '{{ item.admin_password }}' '{{ encryption_key.stdout }}'
  args:
    chdir: "{{ apache_doc_root }}/clustercontrol/app/tools"
  with_items: "{{ cc_ldap }}"
  when:
    item.admin_password is defined and
    item.set
  become: yes
  become_user: "{{ cmon_ssh_user }}"

- name: Copy ClusterControl UI bootstrap file.
  command: cp "{{ ccui_bootstrap }}.default" {{ ccui_bootstrap }}
  when: ccui_bs.stat.exists == false

- name: Configure ClusterControl UI - bootstrap.php.
  shell: sed -i "s|^define('{{ item.param }}'.*|define('{{ item.param }}', '{{ item.value }}');|g" {{ ccui_bootstrap }}
  with_items:
    - { param: "DB_PASS", value: "{{ cmon_mysql_password }}" }
    - { param: "DB_PORT", value: "{{ cmon_mysql_port }}" }
    - { param: "RPC_TOKEN", value: "{{ api_rpc_token }}" }

- name: Apply correct ownership for ClusterControl UI and CMONAPI (RedHat).
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ apache_user }}"
    group: "{{ apache_user }}"
    recurse: yes
  with_items:
    - "{{ apache_doc_root }}/clustercontrol"
  when:
    (ansible_os_family == 'RedHat')

- name: Apply correct ownership for ClusterControl UI and CMONAPI (Debian).
  file:
    path: "{{ item.dest }}"
    src: "{{ item.src }}"
    state: link
    owner: "{{ apache_user }}"
    group: "{{ apache_user }}"
  with_items:
    - { dest: "{{ apache_doc_root }}/clustercontrol", src: "/var/www/clustercontrol" }
  when:
    ((ansible_distribution == 'Debian' and ansible_distribution_major_version|int > 7) or
    (ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int > 12))

- name: Ensure bootstrap.php has correct permission.
  file:
    path: "{{ apache_doc_root }}/clustercontrol/bootstrap.php"
    state: file
    mode: 0644
    owner: "{{ apache_user }}"
    group: "{{ apache_user }}"
  when: ansible_os_family == 'Debian'

- name: Check if SSH key for user '{{ cmon_ssh_user }}' is exist.
  stat: path={{ cmon_ssh_key_path }}
  register: ssh_key_user

- name: Generate SSH key for user '{{ cmon_ssh_user }}'.
  user:
    name: "{{ cmon_ssh_user }}"
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_file: "{{ cmon_ssh_key_path }}"
  register: ssh_key_generate
  when:
    ssh_key_user.stat.exists == false

- name: Retrieve the SSH key for user '{{ cmon_ssh_user }}'.
  fetch:
    dest: "tmp/clustercontrol/key.pub"
    src: "{{ cmon_ssh_key_path }}.pub"
    flat: yes
  changed_when: false

- name: Authorize SSH key to itself.
  authorized_key:
    user: "{{ cmon_ssh_user }}"
    key: "{{ lookup('file', 'tmp/clustercontrol/key.pub') }}"
    state: present

- name: Configure known_hosts value for itself.
  shell: ssh-keyscan -H {{ ansible_default_ipv4.address }} >> {{ cmon_ssh_key_dir }}/known_hosts
  when: ssh_key_user.stat.exists == false

- name: Remove temp local known_hosts copies.
  local_action: file dest="tmp/clustercontrol/key.pub" state=absent

- name: Copy cmon.cnf - ClusterControl Controller configuration.
  template:
    src: cmon.cnf.j2
    dest: "{{ cmon_config_file }}"
    owner: root
    group: root
    mode: 0600
  notify:
    - restart cmon
    - restart cmon-ssh
    - restart cmon-cloud
    - restart cmon-events

- name: Ensure ClusterControl Controller is started and enabled on boot.
  service: name=cmon state=started enabled=yes
  register: cmon_service_configuration

- name: Ensure ClusterControl Cloud is started and enabled on boot.
  service: name=cmon-cloud state=started enabled=yes

- name: Ensure ClusterControl SSH is started and enabled on boot.
  service: name=cmon-ssh state=started enabled=yes

- name: Ensure ClusterControl Events is started and enabled on boot.
  service: name=cmon-events state=started enabled=yes
